// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: hRiCxzQw6uAnAF5XWxoyQB
// Component: qokfWMviD1
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import projectcss from "./plasmic_shopapp.module.css"; // plasmic-import: hRiCxzQw6uAnAF5XWxoyQB/projectcss
import sty from "./PlasmicAdamLogo.module.css"; // plasmic-import: qokfWMviD1/css

export const PlasmicAdamLogo__VariantProps = new Array();

export const PlasmicAdamLogo__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicAdamLogo__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  return true ? (
    <div
      data-plasmic-name={"logo"}
      data-plasmic-override={overrides.logo}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.__wab_text,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.logo
      )}
    >
      <React.Fragment>
        <span
          className={"plasmic_default__all plasmic_default__span"}
          style={{ color: "#FFFFFF" }}
        >
          {"AD"}
        </span>
      </React.Fragment>
    </div>
  ) : null;
}

const PlasmicDescendants = {
  logo: ["logo"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicAdamLogo__ArgProps,
          internalVariantPropNames: PlasmicAdamLogo__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicAdamLogo__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "logo") {
    func.displayName = "PlasmicAdamLogo";
  } else {
    func.displayName = `PlasmicAdamLogo.${nodeName}`;
  }
  return func;
}

export const PlasmicAdamLogo = Object.assign(
  // Top-level PlasmicAdamLogo renders the root element
  makeNodeComponent("logo"),
  {
    // Helper components rendering sub-elements
    // Metadata about props expected for PlasmicAdamLogo
    internalVariantProps: PlasmicAdamLogo__VariantProps,
    internalArgProps: PlasmicAdamLogo__ArgProps
  }
);

export default PlasmicAdamLogo;
/* prettier-ignore-end */
